@startuml
actor User
participant ":Ui" as Ui 
participant ":BuffBuddy" as BuffBuddy 
participant ":Parser" as Parser
participant ":CommandFactory" as CommandFactory 
participant ":ProgCommandFactory" as ProgCommandFactory
participant ":EditProgrammeCommand" as Command
participant ":Model" as Model
participant ":CommandResult" as CommandResult


User -> Ui : "prog edit..."
activate Ui
BuffBuddy -> Ui: readCommand()
activate BuffBuddy
Ui --> BuffBuddy : "prog edit..."

BuffBuddy -> Parser : parse("prog edit...")
activate Parser

Parser -> CommandFactory : createCommand("prog", "edit...")

activate CommandFactory

CommandFactory -> ProgCommandFactory : parse("edit",arguments)
activate ProgCommandFactory

create Command
ProgCommandFactory -> Command : prepareEditCommand(arguments)
activate Command
ProgCommandFactory <-- Command: created Command
CommandFactory <-- ProgCommandFactory: created Command
deactivate ProgCommandFactory
Parser <-- CommandFactory: created Command
deactivate CommandFactory
BuffBuddy <-- Parser: created Command
deactivate Parser


BuffBuddy -> Command : execute()


Command -> Model : interact with Model
activate Model
Command <-- Model: returned Data
deactivate Model

create CommandResult
Command -> CommandResult: new CommandResult(message)


deactivate Command
activate CommandResult
BuffBuddy <-- CommandResult : return CommandResult
deactivate CommandResult
BuffBuddy -> Ui : showMessage()

deactivate BuffBuddy
destroy CommandResult
User <-- Ui : "Successfully edited..."
deactivate Ui


@enduml