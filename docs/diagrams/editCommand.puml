@startuml
actor User
participant ":Ui" as Ui 
participant ":BuffBuddy" as BuffBuddy 
participant ":Parser" as Parser
participant ":CommandFactory" as CommandFactory 
participant ":ProgCommandFactory" as ProgCommandFactory
participant ":EditProgrammeCommand" as Command
participant ":Model" as Model
participant ":CommandResult" as CommandResult


User -> Ui : "prog edit..."
activate Ui
BuffBuddy -> Ui: readCommand()
activate BuffBuddy
Ui --> BuffBuddy : "prog edit..."

BuffBuddy -> Parser : parse("prog edit...")
activate Parser

Parser -> CommandFactory : createCommand("prog", "edit...")

activate CommandFactory

CommandFactory -> ProgCommandFactory : parse("edit",arguments)

activate ProgCommandFactory

ProgCommandFactory -> ProgCommandFactory : prepareEditCommand(arguments)
activate ProgCommandFactory

opt edit type is create day
    ProgCommandFactory -> ProgCommandFactory: parseDay(dayString)
    activate ProgCommandFactory
    ProgCommandFactory --> ProgCommandFactory: created Day
    deactivate ProgCommandFactory
end

opt edit type is create exercise
    ProgCommandFactory -> ProgCommandFactory: parseExercise(exerciseString)
    activate ProgCommandFactory
    ProgCommandFactory --> ProgCommandFactory: created Exercise
    deactivate ProgCommandFactory
end

opt edit type is update exercise
    ProgCommandFactory -> ProgCommandFactory: parseExerciseUpdate(updateString)
    activate ProgCommandFactory
    ProgCommandFactory --> ProgCommandFactory: created ExerciseUpdate
    deactivate ProgCommandFactory
end

create Command
ProgCommandFactory -> Command : create appropiate Edit Command
deactivate ProgCommandFactory

activate Command
ProgCommandFactory <-- Command
CommandFactory <-- ProgCommandFactory : created EditProgrammeCommand
deactivate ProgCommandFactory

Parser <-- CommandFactory : created EditProgrammeCommand
deactivate CommandFactory

BuffBuddy <-- Parser : created EditProgrammeCommand
deactivate Parser

BuffBuddy -> Command : execute()


Command -> Model : interact with Model
activate Model
Command <-- Model: returned Data
deactivate Model

create CommandResult
Command -> CommandResult: create Command Result

deactivate Command
activate CommandResult
BuffBuddy <-- CommandResult : return CommandResult
deactivate CommandResult
BuffBuddy -> Ui : showMessage()
deactivate BuffBuddy

User <-- Ui : "Successfully edited..."
deactivate Ui

@enduml